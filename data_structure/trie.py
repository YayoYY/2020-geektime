'''Trie前缀树：1. 初始化（采用哈希表实现）2. 插入单词3. 查询单词4. 查询前缀ps. 用哈希表实现前缀树，在插入的时候时间复杂度为O(n)，在查询的时候时间复杂度也是O(n)。    如果树的链式存储，则查询的时间复杂度为还要乘以个叶子节点的子节点数量（遍历），因此用哈希表更优。'''class Trie:    def __init__(self):        '''初始化'''        self.trie = {}    def insert(self, word: str):        '''插入单词'''        node = self.trie        for char in word:            if char in node:                node = node[char]            else:                node[char] = {}                node = node[char]        node[""] = True    def search(self, word: str):        '''查询单词'''        node = self.trie        for char in word:            if char in node:                node = node[char]            else:                return False        if "" in node:            return True        else:            return False    def startsWith(self, prefix: str):        '''查找前缀'''        node = self.trie        for char in prefix:            if char in node:                node = node[char]            else:                return False        return Trueif __name__ == '__main__':    trie = Trie()    trie.insert("apple")    ans = trie.search("apple")    print("Search \'apple\':", ans)    trie.insert("app")    ans = trie.search("app")    print("Search \'app\':", ans)    ans = trie.startsWith("ap")    print("Startwith \'ap\':", ans)